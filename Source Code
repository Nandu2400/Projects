# Importing the required libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Suppress warnings
import warnings
warnings.filterwarnings("ignore")

# Load the dataset
df = pd.read_csv("USA_Housing_data.csv")

# Display the first few rows of the dataset
print("First 5 rows of the dataset:")
print(df.head())

# Renaming columns for better readability (if needed)
df.rename(columns={
    'Avg. Area Income': 'Area_Income',
    'Avg. Area House Age': 'House_Age',
    'Avg. Area Number of Rooms': 'Num_Rooms',
    'Avg. Area Number of Bedrooms': 'Num_Bedrooms',
    'Area Population': 'Population'
}, inplace=True)

# Display dataset info and statistics
print("\nDataset Information:")
print(df.info())
print("\nStatistical Summary:")
print(df.describe())

# Exploratory Data Analysis (EDA)
# Plotting histograms for numerical features
df.hist(bins=20, figsize=(15, 10))
plt.suptitle('Histogram of Numeric Features', fontsize=16)
plt.show()

# Correlation heatmap
plt.figure(figsize=(10, 6))
sns.heatmap(df.corr(), annot=True, cmap="coolwarm")
plt.title("Correlation Heatmap")
plt.show()

# Splitting the dataset into features (X) and target variable (y)
X = df[['Area_Income', 'House_Age', 'Num_Rooms', 'Num_Bedrooms', 'Population']]
y = df['Price']

# Splitting the dataset into training and testing sets
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Importing and training a Linear Regression model
from sklearn.linear_model import LinearRegression
model = LinearRegression()
model.fit(X_train, y_train)

# Making predictions
y_pred = model.predict(X_test)

# Evaluating the model
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

print("\nModel Performance:")
print(f"Mean Absolute Error: {mean_absolute_error(y_test, y_pred)}")
print(f"Mean Squared Error: {mean_squared_error(y_test, y_pred)}")
print(f"Root Mean Squared Error: {np.sqrt(mean_squared_error(y_test, y_pred))}")
print(f"RÂ² Score: {r2_score(y_test, y_pred)}")

# Plotting the predicted vs actual values
plt.scatter(y_test, y_pred, alpha=0.5)
plt.xlabel("Actual Prices")
plt.ylabel("Predicted Prices")
plt.title("Actual vs Predicted House Prices")
plt.show()
